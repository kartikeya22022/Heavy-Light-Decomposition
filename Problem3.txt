#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
int n,q;
struct HLD
{
    vector<ll>lazy,tree;
    int nn,blen,nchain,LOGN;
    vector<vector<int>>g,par;
    vector<int>U,V,level,sub,pos;
    vector<int>chainHead,chainParent,chainNumber,baseArray;
    void init(int sz)
    {
        nn=sz;
        LOGN=log2(n)+1;
        tree=vector<ll>(4*nn+5,0);
        lazy=vector<ll>(4*nn+5,0);
        g=vector<vector<int>>(nn+1);
        par=vector<vector<int>>(LOGN,vector<int>(nn+1,-1));
        U=V=sub=pos=level=baseArray=chainHead=chainNumber=chainParent=vector<int>(nn+1,0);
        
        blen=0;
        nchain=1;
        U[0]=1,V[0]=1;
        chainHead[1]=1,chainParent[1]=1;
        
        for(int i=1;i<=nn;i++)g[i].clear();
    }
    void precompute()
    {
        for(int j=1;j<LOGN;j++)
		{
		    for(int i=1;i<=nn;i++)
		    {
		        if(par[j-1][i]==-1)continue;
		        par[j][i]=par[j-1][par[j-1][i]];
		    }
		}
    }
    void build(int node,int l,int r)
    {
	    if(l==r)
	    {   
		    tree[node]=0;
		    return;
	    }
	    int mid=(l+r)/2;
	    build(2*node,l,mid);
	    build(2*node+1,mid+1,r);
	    tree[node]=tree[2*node]+tree[2*node+1];
    }
    ll query(int node,int l,int r,int ql,int qr)
    {
        if(lazy[node])
        {
            tree[node]+=((r-l+1)*lazy[node]);
            if(l!=r)
            {
                lazy[2*node]+=lazy[node];
                lazy[2*node+1]+=lazy[node];
            }
            lazy[node]=0;
        }
	    if(qr<l || ql>r || l>r || ql>qr)
	    return 0;
	    if(l>=ql && r<=qr)
	    {
		    return tree[node];
	    }
    	int mid=(l+r)/2;
	    return query(2*node,l,mid,ql,qr)+query(2*node+1,mid+1,r,ql,qr);
    }
    void update(int node,int l,int r,int ul,int ur,int value)
    {
        if(lazy[node])
        {
            tree[node]+=((r-l+1)*lazy[node]);
            if(l!=r)
            {
                lazy[2*node]+=lazy[node];
                lazy[2*node+1]+=lazy[node];
            }
            lazy[node]=0;
        }
        if(l>r || ul>ur || r<ul || ur<l)return;
        if(l>=ul && r<=ur)
        {
            tree[node]+=((r-l+1)*value);
            if(l!=r)
            {
                lazy[2*node]+=value;
                lazy[2*node+1]+=value;
            }
            return;
        }
        int mid=(l+r)/2;
        update(2*node,l,mid,ul,ur,value);
        update(2*node+1,mid+1,r,ul,ur,value);
    }
    int adj(int v,int e)
    {
        return v^U[e]^V[e];
    }
    void dfs(int v,int e)
    {
    	int p=adj(v,e);
    	par[0][v]=p;
    	sub[v]=1;
    	level[v]=level[p]+1;
	    for(auto ee:g[v])
	    {
	        int u=adj(v,ee);
	        if(ee==e)continue;
	        dfs(u,ee);
	        sub[v]+=sub[u];
	    }
    }
    void hld(int v,int e)
    {
        int p=adj(v,e);
    
	    blen++;
	    pos[v]=blen;
	    baseArray[blen]=v;
	    chainNumber[v]=nchain;
	
	    int sc=-1,sz=0;
	    for(auto ee:g[v])
	    {
	        int u=adj(v,ee);
	        if(ee==e)continue;
	        if(sub[u]>sz)
	        {
	            sc=ee;
	            sz=sub[u];
	        }
	    }
	    if(sc!=-1)
	    {
	        int u=adj(v,sc);
	        chainHead[u]=chainHead[v];
	        chainParent[u]=chainParent[v];
	        hld(u,sc);
	    }
	    for(auto ee:g[v])
	    {
	        int u=adj(v,ee);
	        if(ee==e || ee==sc)continue;
	        nchain++;
	        chainHead[u]=u;
	        chainParent[u]=v;
	        hld(u,ee);
	    }
    }
    int lca(int u,int v)
    {
        if(level[u]>level[v])swap(u,v);
        int d=level[v]-level[u];
        while(d)
        {
            int x=log2(d);
            v=par[x][v];
            d-=(1<<x);
        }
        if(u==v)return v;
        for(int j=LOGN-1;j>=0;j--)
        {
            if(par[j][u]!=par[j][v])
            {
                u=par[j][u];
                v=par[j][v];
            }
        }
        return par[0][u];
    }
    ll query_up(int v,int x)
    {
	    ll ans=0;
	    while(1)
	    {
		    if(chainHead[v]==chainHead[x])
		    {
			    ans=ans+query(1,1,n,pos[x],pos[v]);
			    break;
		    }
		    ans=ans+query(1,1,n,pos[chainHead[v]],pos[v]);
		    v=par[0][chainHead[v]];
	    }
	    return ans;
    }
    void update_up(int v,int x,int value)
    {
        while(1)
	    {
	        if(v==x)break;
		    if(chainHead[v]==chainHead[x])
		    {
			    update(1,1,n,pos[x]+1,pos[v],value);
			    break;
		    }
		    update(1,1,n,pos[chainHead[v]],pos[v],value);
		    v=par[0][chainHead[v]];
	    }
    }
}hldBaba;
int32_t main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
	int t=1;
	while(t--)
	{
	    scanf("%d %d",&n,&q);
	    hldBaba.init(n);
		for(int i=1;i<n;i++)
		{
		    int u,v;
			scanf("%d %d",&u,&v);
			hldBaba.g[u].push_back(i);
			hldBaba.g[v].push_back(i);
			hldBaba.U[i]=u,hldBaba.V[i]=v;
		}
		hldBaba.dfs(1,0);
		hldBaba.hld(1,0);
		hldBaba.build(1,1,n);
		hldBaba.precompute();
		while(q--)
		{
			char s[10];
			scanf("%s",s);
			if(s[0]=='P')
			{
			    int u,v;
			    scanf("%d %d",&u,&v);
			    int x=hldBaba.lca(u,v);
			    hldBaba.update_up(u,x,1);
			    hldBaba.update_up(v,x,1);
			}
			else
			{
			    int u,v;
			    scanf("%d %d",&u,&v);
			    if(hldBaba.level[u]>hldBaba.level[v])swap(u,v);
				ll ans=hldBaba.query(1,1,n,hldBaba.pos[v],hldBaba.pos[v]);
				printf("%lld\n",ans);
			}
		}
	}
	return 0;
}  
//Problem https://www.spoj.com/problems/GRASSPLA/
